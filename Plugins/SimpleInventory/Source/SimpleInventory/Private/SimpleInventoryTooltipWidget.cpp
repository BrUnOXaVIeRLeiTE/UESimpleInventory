//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///			Copyright 2021 (C) Bruno Xavier Leite
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "SimpleInventoryTooltipWidget.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

USimpleInventoryTooltipWidget::~USimpleInventoryTooltipWidget(){}
USimpleInventoryTooltipWidget::USimpleInventoryTooltipWidget(const FObjectInitializer &Initializer) : Super(Initializer) {
	bIsFocusable = false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void USimpleInventoryTooltipWidget::NativeConstruct() {
	Super::NativeConstruct();
}

void USimpleInventoryTooltipWidget::Reconstruct() {
	if (Item==nullptr||Item->IsPendingKill()) {
		RemoveFromParent(); return;
	}///
	//
	if (ItemName) {
		ItemName->SetText(Item->ItemName);
	}///
	//
	if (Item->Recipe) {
		check(Item->Recipe->Banner);
		if (ItemBanner) {ItemBanner->SetBrushFromTexture(Item->Recipe->Banner);}
		if (ItemDescription) {ItemDescription->SetText(Item->Recipe->Description);}
	}///
	//
	if (Background) {
		switch(Item->Rarity) {
			case ESimpleItemRarity::Rare: {Background->SetContentColorAndOpacity(FLinearColor(10,10,225));} break;
			case ESimpleItemRarity::Epic: {Background->SetContentColorAndOpacity(FLinearColor(225,10,225));} break;
			case ESimpleItemRarity::Common: {Background->SetContentColorAndOpacity(FLinearColor(128,128,128));} break;
			case ESimpleItemRarity::Distinct: {Background->SetContentColorAndOpacity(FLinearColor(10,225,10));} break;
			case ESimpleItemRarity::Special: {Background->SetContentColorAndOpacity(FLinearColor(10,225,225));} break;
			case ESimpleItemRarity::Legendary: {Background->SetContentColorAndOpacity(FLinearColor(225,128,10));} break;
		default: break;}
	}///
	//
	LOG_SV(true,ESeverity::Info,TEXT("Reconstruct Tooltip()!"));
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void USimpleInventoryTooltipWidget::SetItemReference(USimpleInventoryItem* NewItem) {
	Item = NewItem;
	//
	Reconstruct();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////